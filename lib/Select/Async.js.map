{"version":3,"sources":["../../src/Select/Async.js"],"names":["SelectAsync","props","loadOptions","term","callback","error","data","options","_callback","setState","isLoading","promise","then","state","React","cloneElement","children","Object","assign","onTyping","PureComponent","propTypes","autoload","PropTypes","bool","isRequired","ignoreAccents","ignoreCase","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAGMA,W;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAAA,YASnBC,WATmB,GASL,UAACC,IAAD,EAAU;AAAA,YACdD,WADc,GACE,MAAKD,KADP,CACdC,WADc;;;AAGtB,YAAME,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAChC,cAAMC,UAAUD,QAAQA,KAAKC,OAAb,IAAwB,EAAxC;AACA,cAAIH,aAAa,MAAKI,SAAtB,EAAiC;AACnC,kBAAKA,SAAL,GAAiB,IAAjB;AACA,kBAAKC,QAAL,CAAc;AACbC,yBAAW,KADE;AAEbH;AAFa,aAAd;AAIA;AACC,SATD;;AAWA,cAAKC,SAAL,GAAiBJ,QAAjB;;AAEA,YAAMO,UAAUT,YAAYC,IAAZ,EAAkBC,QAAlB,CAAhB;;AAEA,YAAIO,OAAJ,EAAa;AACdA,kBAAQC,IAAR,CACC,UAACN,IAAD;AAAA,mBAAUF,SAAS,IAAT,EAAeE,IAAf,CAAV;AAAA,WADD,EAEC,UAACD,KAAD;AAAA,mBAAWD,SAASC,KAAT,CAAX;AAAA,WAFD;AAIA;;AAED,YAAK,MAAKG,SAAL,IAAkB,CAAC,MAAKK,KAAL,CAAWH,SAAnC,EAA+C;AAC9C,gBAAKD,QAAL,CAAc;AACbC,uBAAW;AADE,WAAd;AAGA;AACA,OAvCkB;;AAGjB,YAAKG,KAAL,GAAa;AACXH,mBAAW,KADA;AAEXH,iBAASN,MAAMM;AAFJ,OAAb;AAHiB;AAOlB;;;;+BAkCQ;AACP,eAAOO,gBAAMC,YAAN,CAAmB,KAAKd,KAAL,CAAWe,QAA9B,EAAwCC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKjB,KAAvB,EAA8B;AAC3EM,mBAAS,KAAKM,KAAL,CAAWN,OADuD;AAE3EY,oBAAU,KAAKjB;AAF4D,SAA9B,CAAxC,CAAP;AAID;;;;IA/CuBY,gBAAMM,a;;AAkDhCpB,cAAYqB,SAAZ,GAAwB;AACtBC,cAAUC,oBAAUC,IAAV,CAAeC,UADH;AAEtBC,mBAAeH,oBAAUC,IAFH;AAGtBG,gBAAYJ,oBAAUC,IAHA;AAItBtB,iBAAaqB,oBAAUK,IAAV,CAAeH;AAJN,GAAxB;;AAOAzB,cAAY6B,YAAZ,GAA2B;AACzB3B,iBAAa,uBAAM,CAAE;AADI,GAA3B;;oBAIeF,W","file":"Async.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass SelectAsync extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: false,\n      options: props.options\n    }\n  }\n\n  loadOptions = (term) => {\n    const { loadOptions } = this.props\n\n    const callback = (error, data) => {\n      const options = data && data.options || [];\n      if (callback === this._callback) {\n\t\t\t\tthis._callback = null;\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\toptions\n\t\t\t\t});\n\t\t\t}\n    }\n\n    this._callback = callback\n\n    const promise = loadOptions(term, callback);\n\n    if (promise) {\n\t\t\tpromise.then(\n\t\t\t\t(data) => callback(null, data),\n\t\t\t\t(error) => callback(error)\n\t\t\t);\n\t\t}\n\n\t\tif ( this._callback && !this.state.isLoading ) {\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true\n\t\t\t});\n\t\t}\n  }\n\n  render() {\n    return React.cloneElement(this.props.children, Object.assign({}, this.props, {\n      options: this.state.options,\n      onTyping: this.loadOptions\n    }))\n  }\n}\n\nSelectAsync.propTypes = {\n  autoload: PropTypes.bool.isRequired,\n  ignoreAccents: PropTypes.bool,\n  ignoreCase: PropTypes.bool,\n  loadOptions: PropTypes.func.isRequired\n}\n\nSelectAsync.defaultProps = {\n  loadOptions: () => {}\n}\n\nexport default SelectAsync\n"]}